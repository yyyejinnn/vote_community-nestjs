model Votes {
    id         Int      @id @default(autoincrement())
    title      String
    writer     Users    @relation("VoteWriter", fields: [writerId], references: [id])
    writerId   Int
    likedUsers Users[]  @relation("LikedVoteUsers")
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    voteChoices  VoteChoices[]
    votedUsers   VotedUsers[]
    VoteComments VoteComments[]

    @@map("votes")
}

model VoteChoices {
    id        Int      @id @default(autoincrement())
    title     String
    vote      Votes    @relation(fields: [voteId], references: [id])
    voteId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    votedUsers VotedUsers[]

    @@map("vote-options")
}

model VotedUsers {
    user         Users       @relation(fields: [userId], references: [id])
    userId       Int
    vote         Votes       @relation(fields: [voteId], references: [id])
    voteId       Int
    voteChoice   VoteChoices @relation(fields: [voteChoiceId], references: [id])
    voteChoiceId Int
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt

    @@id([userId, voteChoiceId])
    @@map("voted-users")
}

model VoteComments {
    id               Int                @id @default(autoincrement())
    content          String
    user             Users              @relation(fields: [userId], references: [id])
    userId           Int
    vote             Votes              @relation(fields: [voteId], references: [id])
    voteId           Int
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    VoteCommentLikes VoteCommentLikes[]

    @@map("vote-comments")
}

model VoteCommentLikes {
    isClicked     Boolean      @default(false)
    voteComment   VoteComments @relation(fields: [voteCommentId], references: [id])
    voteCommentId Int
    user          Users        @relation(fields: [userId], references: [id])
    userId        Int
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt

    @@id([userId, voteCommentId])
    @@map("vote-comments-likes")
}

model Users {
    id         Int          @id @default(autoincrement())
    votedUsers VotedUsers[]

    VoteComments     VoteComments[]
    VoteCommentLikes VoteCommentLikes[]

    writtenVotes Votes[] @relation("VoteWriter")
    likedVotes   Votes[] @relation("LikedVoteUsers")

    @@map("users")
}
