// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

model Users {
    id                  Int            @id @default(autoincrement())
    email               String         @unique
    password            String
    nickname            String
    createdAt           DateTime       @default(now())
    updatedAt           DateTime       @updatedAt
    refreshToken        RefreshTokens? @relation(name: "RefreshTokensToUsers")
    votedUsers          VotedUsers[]   @relation(name: "UsersToVotedUsers")
    writtenVotes        Votes[]        @relation(name: "VoteWriter")
    likedVotes          Votes[]        @relation(name: "LikedVoteUsers")
    writtenVoteComments VoteComments[] @relation(name: "VoteCommentWriter")
    likedVoteComments   VoteComments[] @relation(name: "LikedVoteCommentUsers")

    @@map("users")
}

model RefreshTokens {
    token     String   @unique
    user      Users    @relation(name: "RefreshTokensToUsers", fields: [userId], references: [id])
    userId    Int      @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("refresh-tokens")
}

model Votes {
    id           Int            @id @default(autoincrement())
    title        String
    writer       Users          @relation(name: "VoteWriter", fields: [writerId], references: [id])
    writerId     Int
    likedUsers   Users[]        @relation(name: "LikedVoteUsers")
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    voteChoices  VoteChoices[]  @relation(name: "VoteChoicesToVotes")
    votedUsers   VotedUsers[]   @relation(name: "VotedUsersToVotes")
    VoteComments VoteComments[] @relation(name: "VoteCommentsToVotes")

    @@map("votes")
}

model VoteChoices {
    id         Int          @id @default(autoincrement())
    title      String
    vote       Votes        @relation(name: "VoteChoicesToVotes", fields: [voteId], references: [id])
    voteId     Int
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    votedUsers VotedUsers[] @relation(name: "VoteChoicesToVotedUsers")

    @@map("vote-options")
}

model VotedUsers {
    id           Int         @id @default(autoincrement())
    user         Users       @relation(name: "UsersToVotedUsers", fields: [userId], references: [id])
    userId       Int
    vote         Votes       @relation(name: "VotedUsersToVotes", fields: [voteId], references: [id])
    voteId       Int
    voteChoice   VoteChoices @relation(name: "VoteChoicesToVotedUsers", fields: [voteChoiceId], references: [id])
    voteChoiceId Int
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt

    @@unique([userId, voteChoiceId])
    @@unique([userId, voteId])
    @@map("voted-users")
}

model VoteComments {
    id         Int      @id @default(autoincrement())
    content    String
    writer     Users    @relation(name: "VoteCommentWriter", fields: [writerId], references: [id])
    writerId   Int
    vote       Votes    @relation(name: "VoteCommentsToVotes", fields: [voteId], references: [id])
    voteId     Int
    likedUsers Users[]  @relation(name: "LikedVoteCommentUsers")
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("vote-comments")
}
